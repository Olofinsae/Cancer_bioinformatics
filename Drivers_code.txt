#!/bin/bash --login
#$ -cwd
#$ -pe smp.pe 4
#$ -t 1-n   # specify your sample number (n)

#specify parameter for array job

x="${SGE_TASK_ID}p"

#load the essential R and Python packages

module load apps/gcc/R/4.1.2
module load apps/python/2.7.15/gcc-4.8.5
module load libs/pandas/0.17.0
module load libs/numpy/1.10.4
module load apps/gcc/R/4.1.2
library (tidyverse)
library (dplyr)
library (readr)

mkdir Input_dNdScv Output_dNdScv

# step1 : generates sample (n)_indel.vcf.gz files from VCF files  (n = numerical samples number)

COUNTER=0
for file in `ls /mnt/bmh01-rds/UoOxford_David_W/shared/Samson_project/Mutant_Wild_data/ssDPC_from_VCFs/utility_codes/test/*_Tier_3.vcf.gz`
do
  let COUNTER=COUNTER+1
  echo $file $COUNTER
  cp $file sample${COUNTER}_indel.vcf.gz
done

#generates .txt files for array job input

for file in *_indel.vcf.gz; do  echo $file >> vcf_list.txt; done
for file in *_indel.vcf.gz
do sample=`echo $file | cut -d '_' -f 1`
echo ${sample}_final_indel >> sample_list.txt
done

#step2 : runs array job on vcf_list.txt and sample_list.txt to produce input files that generates dNdScv mutation table

vcf_files_pro=`sed -n $x vcf_list.txt`
finalindel=`sed -n $x sample_list.txt`
sampleId=`echo $vcf_files_pro | cut -d '_' -f 1`
zcat $vcf_files_pro | grep -v "##" | awk '{gsub (/#/,"")}1' | awk -v ID="${sampleId^}" 'NR==1{print "SampleID", $1, $2, $4, $5; next}{print ID, $1, $2, $4, $5}' | tail -n +2 > $finalindel
#concatenates all *_final_indel files into a "combined.txt" file and attach the dndscv headers to generate the dndscv mutation table
for file in **_final_indel ; do cat $file >> combined.txt ; done
awk 'BEGIN {print "SampleID chr pos ref mut"}{print $0}' combined.txt  > dndscv_mutation.txt

mv dndscv_mutation.txt Input_dNdScv

cd Input_dNdScv

#step3 : generates a "dNdScv_script.R" script to run the programme

echo -e "library (dndscv)\nm = read.table("/mnt/bmh01-rds/UoOxford_David_W/shared/Samson_project/Mutant_Wild_data/ssDPC_from_VCFs/utility_codes/test/test2/dNdScv_output/dndscv_mutation.txt", header=1, stringsAsFactors = F)\ndndsout = dndscv(m)\nsel_cv = dndsout$sel_cv\nprint(sel_cv)\nsignif_genes = sel_cv[sel_cv$qglobal_cv<0.1, c("gene_name","qglobal_cv")]\nrownames(signif_genes) = NULL\nprint(signif_genes)\nprint(dndsout$globaldnds)\nprint(dndsout$annotmuts)\nprint(dndsout$nbreg$theta)\nsignif_genes_localmodel = as.vector(dndsout$sel_loc$gene_name[dndsout$sel_loc$qall_loc<0.1])\nprint(signif_genes_localmodel)" >> dNdScv_script.R


#step4 : runs the dNdScv algorithm. PS: Write your dNdScv.R script (please use the exact name here as the code picks up this file name



R CMD BATCH dNdScv.script.R
./dNdScv_script.R

cp *.Rout ../Output_dNdScv 

#step5 : generate mutated csv table for driver genes Clonality 

#- generate a "dNdScv.py" script

echo '''import pandas as pd
import glob
import os
import pandas as pd
import numpy as np

#get dpclust output  

dpoutput="/mnt/bmh01-rds/UoOxford_David_W/shared/Samson_project/Mutant_Wild_data/ssDPC_run_snv/Output_all_regions_no_XY_SNVs/dpcluster_indel2"
dndscvfile="/mnt/bmh01-rds/UoOxford_David_W/shared/Samson_project/Mutant_Wild_data/ssDPC_run_snv/Output_all_regions_no_XY_SNVs/PPCG_indel_updated2.csv"
#dndscvfile="exp.csv"



#get sample ids

df=pd.read_csv(dndscvfile)

allsamples=df['SampleID'].values

path_dict={}
allsamplefolders=glob.glob('%s/*'%dpoutput)
allinfo=[]
errors=[]
for folder in allsamplefolders:

    try:
        name1=os.path.split(folder)[-1].split('_')[0]
        name2=os.path.split(folder)[-1].split('_')[1]
        print(name1)
        print(name2)
        #path_dict[name]=folder
    except:
        errors.append('%s-output files do not exist'%folder)
        print('output file not not exist:%s',folder)
        continue




    DBCLUST_CLONALITY_FILE="%s/%s_%s_2000iters_1000burnin_bestClusterInfo.txt"%(folder,name1,name2)
    DPCLUST_VARIANT_FILE = "%s/%s_%s_2000iters_1000burnin_bestConsensusAssignments.bed"%(folder,name1,name2)

    try:
        clusterdf=pd.read_csv(DPCLUST_VARIANT_FILE,sep='\t')
        clonalitydf=pd.read_csv(DBCLUST_CLONALITY_FILE,sep='\t')
    except:
        errors.append('%s-output files do not exist'%name)
        print('output file not not exist:%s',name)
        continue


    info=df[df['SampleID']==name1].values[0]
    subset=df[df['SampleID']==name1]
    for info in subset.values:
        chr_,pos=info[1],info[2]
        start=pos-1
        end=pos
        print(chr_,start,end)

        #search for assigned cluster

        try:
            clusterval=clusterdf[ (clusterdf['chr']==chr_) & (clusterdf['start']==start) & (clusterdf['end']==end)].values[0][3]

            print(clusterval)

            clonality_value=clonalitydf[clonalitydf['cluster.no']==clusterval]['location'].values[0]
            no_of_mutations=clonalitydf[clonalitydf['cluster.no']==clusterval]['no.of.mutations'].values[0]
            print(clonality_value)
        except:
            errors.append('%s-%s-%s'%(name1,chr_,'chr or clonality information not found in bestClusterInfo.txt'))
            items=[name1,chr_,pos,'none','none','none','none','none','none']
            items=np.append(info,items,axis=0)
            allinfo.append(items)

            continue


    #if clonality_value>1.05:
    #    clonality_label='superclonal'
        if clonality_value<0.95:
            clonality_label='subclonal'
        elif clonality_value >=0.95 and clonality_value <=1.05:
            clonality_label='clonal'
        elif clonality_value>1.05:
            clonality_label='superclonal'
    #gggg
        items=np.append(info,[name1,chr_,pos,start,end,clusterval,clonality_value,clonality_label,no_of_mutations],axis=0)
        allinfo.append(items)
        print(info)
        print([name1,chr_,pos,start,end,clusterval,clonality_value,clonality_label])
        print(items)



cols=df.columns
newcols=np.append(cols,['SampleID','CHR','POS','START','END','CLUSTER','CLONALITY_SCORE','CLONALITY_LABEL','NO.OF.MUTATIONS'],axis=0)
newdf=pd.DataFrame(allinfo,columns=newcols)
newdf.to_csv('final.csv',index=False)


with open('errors.txt','w') as errorout:
    errorout.write('\n'.join(errors)) ''' > dNdScv.py



#- runs the dNdScv.py script
./python3 dNdScv.py
 

#step6 : generates dNdScv annotation R Plots

#- Clonality plots for annotated driver genes


library(tidyverse)

Drivers_gene <- read_csv("final.csv", TRUE, "")


Clonality_data <- Drivers_gene %>%

select (Sign_genes, CLONALITY_LABEL)

jpeg("myplot.jpeg")

ggplot(Clonality_data,aes(x = Sign_genes, fill = CLONALITY_LABEL)) + geom_bar()  + coord_flip()

dev.off()

#- functional coding mutation plots fro annotated driver genes

